<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
hover = -1;

if (point_in_rectangle(mouse_x,mouse_y,x,y,x+width,y+height)){//mouse in the box
    //what box is the mouse in?
    var y2 = y+buffer+36;
    for(var i = 0; i&lt;count; i++){
        if(mouse_y&lt; y2){
            break;
        }
        y2+=buffer;
        if(mouse_y&lt;=y2 &amp;&amp; mouse_x&gt;= center-half[i] &amp;&amp; mouse_x&lt;= center+half[i]){
            hover =i;
            break;        
        }
        y2+= buffer;
    }
    global.blocked = true; ///this...
    
    //if in a box and mouse click do a switch
    if(hover!=-1 &amp;&amp; (mouse_check_button_pressed(mb_left)|| 
            mouse_check_button_pressed(mb_right)) &amp;&amp; remainingJuice &gt;= abilityCost[hover]){
        switch abilities[hover]{
            case "Move":
                global.selected = owner;
                //image_blend = c_white;
                ds_list_add(global.moveList,owner);
                instance_destroy();
                break;
            case "Teleport":
                global.teleport = true;
                global.selected = owner;
                
                var here = instance_position(mouse_x,mouse_y,oTile);
                if(here != noone &amp;&amp; here.visitor==noone){
                    here.image_blend = c_white;
                    global.previous = here;
                }
                else{
                    global.previous = noone;
                }
                    
                instance_destroy();
                break;
            case "Push":
                with owner{
                    image_blend = c_red;
                    visitor.remainingMoves-=3;//3
                    for(var i=array_length_1d(neighbor)-1; i&gt;=0; i--){
                        var t0 = neighbor[i];
                        if(t0.visitor!=noone){
                            var xd = t0.x - x;
                            var yd = t0.y - y;
                            var t = noone;
                            for(var j = 2; j&lt;5; j++){
                                var tx = collision_point(x+xd*j,y+yd*j,oTile,true,true);
                                if (tx != noone &amp;&amp; tx.visitor == noone){
                                    t = tx;
                                }
                                else{break;}
                            }
                            if (t != noone){
                                t.visitor = t0.visitor;
                                t0.visitor = noone;
                                t.visitor.tx=t.x;
                                t.visitor.ty=t.y;
                                global.isBusy ++;
                                with t.visitor{
                                    instance_change(oPushedAnimator,true);
                                }
                            }
                        }
                    }
                }

                instance_destroy();//kill ability box
                break;
            case "Earth":
                with owner{
                    image_blend = c_red;
                    visitor.remainingMoves-=4;                                              //earth cost
                    for(var i=array_length_1d(neighbor)-1; i&gt;=0; i--){//for each neighbor
                        if(neighbor[i].visitor==noone){
                                                                //might have to add to team
                            neighbor[i].visitor=instance_create(neighbor[i].x,neighbor[i].y,oWall);
                        }
                        else{//do damage or something
                        }
                        
                    }
                }
                instance_destroy();//kill ability box
                break;    
            default:
                window_set_caption("WTF DID YOU DO?");
        }
    }
    
    

}//click out of box
else if(mouse_check_button_pressed(mb_left)|| mouse_check_button_pressed(mb_right)){
    owner.image_blend = c_red;
    instance_destroy();
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();

//draw encompassing box
draw_set_colour(c_black);
draw_set_alpha(.15);
draw_rectangle(x,y,x+width,y+height,false);
draw_set_alpha(1);
draw_rectangle(x-1,y-1,x+width,y+height,true);//border

//draw juice box
draw_set_colour(c_white);
draw_set_alpha(.5);
draw_rectangle(x,y,x+width,y+36,false);
draw_set_colour(c_black);
draw_set_alpha(1);
draw_rectangle(x-1,y-1,x+width,y+36,true);//border

if(hover==-1 || remainingJuice &lt; abilityCost[hover]){
    var reJuice= remainingJuice;
}
else{
    var reJuice= remainingJuice - abilityCost[hover];
}

drawContainer(sHeart,heartCount,remainingHealth,heartX,y+2);
drawContainer(sJuice,juiceCount,reJuice,juiceX, y+2+17);


var y2= y+buffer+36;

draw_set_halign(fa_right);
for(var i = 0; i&lt;count;i++){
    if(abilityCost[i]&gt;remainingJuice){
        draw_set_colour(c_dkgray);
    }
    else if(hover==i){//change color if mouse over
        draw_set_colour(c_yellow);
    }
    else{
        draw_set_colour(c_white);
    }
    draw_rectangle(center-half[i], y2, center+half[i], y2+buffer,false);
    draw_set_colour(c_black);
    draw_rectangle(center-half[i]-1, y2-1, center+half[i], y2+buffer,true);//border
    //y2++;
    
    draw_text(center+half[i],y2,abilities[i]);// + string(abilityCost[i]));
    drawContainer(sJuice,abilityCost[i]/2,abilityCost[i],center-half[i], y2);
    y2+=buffer*2;
    
    //draw_rectangle(mouse_x,mouse_y,mouse_x,mouse_y,false);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
